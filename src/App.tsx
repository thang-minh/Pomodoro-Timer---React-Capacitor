// src/App.tsx

import React, { useState, useEffect, useRef } from 'react';

// Import c√°c plugin t·ª´ Capacitor
import { LocalNotifications } from '@capacitor/local-notifications';
import { Haptics } from '@capacitor/haptics';
import { Dialog } from '@capacitor/dialog';

// Import file CSS
import './App.css';

// ƒê·ªãnh nghƒ©a c√°c h·∫±ng s·ªë v√† ki·ªÉu d·ªØ li·ªáu ƒë·ªÉ code s·∫°ch h∆°n
const WORK_DURATION = 25 * 60; // 25 ph√∫t
const BREAK_DURATION = 5 * 60;  // 5 ph√∫t

type Mode = 'work' | 'break';

type Session = {
  id: number;
  type: Mode;
  completedAt: string;
};

function App() {
  // === STATE MANAGEMENT ===
  const [mode, setMode] = useState<Mode>('work');
  const [time, setTime] = useState(WORK_DURATION);
  const [isActive, setIsActive] = useState(false);
  const [history, setHistory] = useState<Session[]>([]);
  const [selectedSound, setSelectedSound] = useState('sounds/bell.mp3');
  
  const intervalRef = useRef<number | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  // === EFFECTS ===

  // 1. Y√™u c·∫ßu quy·ªÅn g·ª≠i th√¥ng b√°o khi app kh·ªüi ƒë·ªông
  useEffect(() => {
    LocalNotifications.requestPermissions();
  }, []);

  // 2. T·∫£i l·ªãch s·ª≠ t·ª´ localStorage khi app kh·ªüi ƒë·ªông
  useEffect(() => {
    try {
      const savedHistory = localStorage.getItem('pomodoroHistory');
      if (savedHistory) {
        setHistory(JSON.parse(savedHistory));
      }
    } catch (error) {
      console.error("Failed to load history from localStorage", error);
    }
  }, []);

  // 3. L∆∞u l·ªãch s·ª≠ v√†o localStorage m·ªói khi c√≥ thay ƒë·ªïi
  useEffect(() => {
    localStorage.setItem('pomodoroHistory', JSON.stringify(history));
  }, [history]);

  // 4. Logic ch√≠nh c·ªßa b·ªô ƒë·∫øm gi·ªù
  useEffect(() => {
    if (isActive) {
      intervalRef.current = setInterval(() => {
        setTime((prevTime) => {
          if (prevTime <= 1) {
            // H·∫øt gi·ªù
            handleSessionEnd();
            return 0; // Tr·∫£ v·ªÅ 0 ƒë·ªÉ tr√°nh hi·ªÉn th·ªã -1
          }
          return prevTime - 1;
        });
      }, 1000);
    } else {
      // D·ªçn d·∫πp interval khi timer d·ª´ng
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    }
    const toggleTimer = () => {
    // "M·ªû KH√ìA" √ÇM THANH KHI NH·∫§N START L·∫¶N ƒê·∫¶U
    if (!audioRef.current) {
      // Ch·ªâ t·∫°o m·ªôt l·∫ßn duy nh·∫•t
      audioRef.current = new Audio(selectedSound); // T·∫£i √¢m thanh m·∫∑c ƒë·ªãnh
      audioRef.current.volume = 0; // ƒê·∫∑t √¢m l∆∞·ª£ng = 0
      audioRef.current.play().catch(() => {}); // Ph√°t m·ªôt ti·∫øng "im l·∫∑ng" ƒë·ªÉ m·ªü kh√≥a
      audioRef.current.volume = 1; // ƒê·∫∑t l·∫°i √¢m l∆∞·ª£ng
    }
     useEffect(() => {
    if (audioRef.current) {
      audioRef.current.src = selectedSound;
    }
  }, [selectedSound]);

  // C·∫¨P NH·∫¨T H√ÄM sendNotification
  const sendNotification = async (sessionType: Mode) => {
    // ... Haptics.vibrate() v√† logic title, body gi·ªØ nguy√™n ...

    // X√ìA thu·ªôc t√≠nh "sound" v√† THAY B·∫∞NG L·ªÜNH PH√ÅT TR·ª∞C TI·∫æP
    await LocalNotifications.schedule({
      notifications: [
        {
          title,
          body,
          id: 1,
          schedule: { at: new Date(Date.now() + 100) },
          // sound: selectedSound, // <= B·ªé D√íNG N√ÄY ƒêI
        },
      ],
    });

    // PH√ÅT √ÇM THANH TR·ª∞C TI·∫æP QUA AUDIO ELEMENT
    if (audioRef.current) {
      audioRef.current.currentTime = 0; // Tua v·ªÅ ƒë·∫ßu
      audioRef.current.play(); // Ph√°t √¢m thanh
    }

    await Dialog.alert({ title, message: body });
  };
    setIsActive(!isActive);
  };
    // H√†m cleanup, ch·∫°y khi component unmount ho·∫∑c dependency thay ƒë·ªïi
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [isActive]);

  // === HANDLER FUNCTIONS ===
  
  // G·ª≠i th√¥ng b√°o v√† rung
  const sendNotification = async (sessionType: Mode) => {
    await Haptics.vibrate();
    
    const title = sessionType === 'work' ? "Work session is over!" : "Break time is over!";
    const body = sessionType === 'work' ? "Time for a short break. üßò" : "Time to get back to work! üí™";

    await LocalNotifications.schedule({
      notifications: [
        {
          title,
          body,
          id: 1, // D√πng ID c·ªë ƒë·ªãnh ƒë·ªÉ th√¥ng b√°o m·ªõi ghi ƒë√® l√™n th√¥ng b√°o c≈©
          schedule: { at: new Date(Date.now() + 100) },
          sound: selectedSound, // S·ª≠ d·ª•ng √¢m b√°o ƒë√£ ch·ªçn
        },
      ],
    });

    await Dialog.alert({ title, message: body });
  };

  // X·ª≠ l√Ω khi m·ªôt phi√™n k·∫øt th√∫c
  const handleSessionEnd = () => {
    // Ghi l·∫°i l·ªãch s·ª≠
    const newSession: Session = {
      id: Date.now(),
      type: mode,
      completedAt: new Date().toLocaleTimeString(),
    };
    setHistory(prevHistory => [newSession, ...prevHistory]);

    // G·ª≠i th√¥ng b√°o
    sendNotification(mode);

    // Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô
    const newMode = mode === 'work' ? 'break' : 'work';
    setMode(newMode);
    setTime(newMode === 'work' ? WORK_DURATION : BREAK_DURATION);
    setIsActive(false);
  };
  
  // B·∫≠t/t·∫Øt timer
  const toggleTimer = () => {
    setIsActive(!isActive);
  };

  // Reset timer v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa phi√™n hi·ªán t·∫°i
  const resetTimer = () => {
    setIsActive(false);
    setTime(mode === 'work' ? WORK_DURATION : BREAK_DURATION);
  };

  // ƒê·ªãnh d·∫°ng th·ªùi gian t·ª´ gi√¢y sang MM:SS
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  // === JSX RENDER ===
  return (
    <div className="container">
      <h1>Pomodoro Timer</h1>
      
      {/* Hi·ªÉn th·ªã Timer */}
      <div className="timer-display">
        <p className="mode-label">{mode === 'work' ? 'Work Session' : 'Break Time'}</p>
        <p className="time">{formatTime(time)}</p>
      </div>
      
      {/* C√°c n√∫t ƒëi·ªÅu khi·ªÉn */}
      <div className="buttons">
        <button onClick={toggleTimer} className={isActive ? 'pause' : 'start'}>
          {isActive ? 'Pause' : 'Start'}
        </button>
        <button onClick={resetTimer} className="reset">
          Reset
        </button>
      </div>
      
      {/* C√†i ƒë·∫∑t √¢m b√°o */}
      <div className="settings">
        <label htmlFor="sound-select">Notification Sound: </label>
        <select 
          id="sound-select"
          value={selectedSound} 
          onChange={e => setSelectedSound(e.target.value)}
        >
          <option value="sounds/sound1.mp3">Bell</option>
          <option value="sounds/sound2.mp3">Chime</option>
        </select>
      </div>

      {/* L·ªãch s·ª≠ phi√™n */}
      {history.length > 0 && (
        <div className="history">
          <h2>Session History</h2>
          <ul>
            {history.map(session => (
              <li key={session.id}>
                <span>{session.type === 'work' ? 'üí™ Work' : 'üßò Break'}</span>
                <span>Completed at {session.completedAt}</span>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

export default App;